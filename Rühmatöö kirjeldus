OOP rühmatöö kirjeldus
Autorid: Kairin Tammel, Mariann Märtin

Õpiabiline

Õpiabiline on mitme funktsionaalsusega programm, mis vastvalt kasutaja soovidele suudab
teda õppetöö käigus abistada. Programm esitab esmalt kasutajale loetelu võimalikest
tööriistadest ning seejärel laseb tal valida, millist sellel hetkel vaja oleks. Saadaval olevad
tööriistad on:

1) Motiveeriv sõnum
• Loeb failist ‘peptalk.txt’ ridade kaupa motiveerivad tsitaadid ning Random abil
valib nende kõigi seast suvalise, mille kasutajale kuvada.

2) Pomodoro taimer
• Pomodoro aitab kasutajal tööle keskenduda kindlate intervallide abil.
• Ühe tsükli tööaeg on 25 minutit ning pausi aeg 5 minutit. Iga nelja tsükli järel on
paus pikem (15 minutit)
• Programm seletab kasutajale taimeri tööd ning palub siis sisestada soovitud
tsüklite arvu
• Kastutaja paneb taimeri tööle enter klahvi vajutades ning seejärel on talle pidevalt
näha mitu minutit ja sekundit käesolevas etapis veel alles jäänud on
• Programm lõpetab töö alles peale määratud arvu tsüklite läbimist

3) Flash kaartide koostamine
• Programm koostab kasutaja sisendiga flashkaardid. Kaardid segatakse ning esitatakse kasutajale suvalises järjekorras.
• Kasutajale järgnevalt esitatatase küsimus ja ta saab valida kas tahab vaadata vastust või mitta. Peale seda saab ta liikuda järgmise küsimuse juurde.
Samuti on võimalus liikuda eelmise üsimuse juurde. Kui kõik küsimused on vaadataud ja jõutakse lõppu, saab kasutaja valida, kas tahab
uuesti kaardid segada ning küsimusi uuesti vaadata või programmi lõpetada.

4) ToDo list
• JavaFX rakendus, mis on mõeldud kasutaja todo listi koostamiseks.
• loetelu salvestatakse faili, ning loetakse sealt uuesti sisse, kui rakendus käivitatakse.



Klassid:

1) Main
• Kasutajaga suhtlemine, teiste klasside poole pöördumine

2) MotiveerivSõnum
• Loeb failist sõnumid ja tagastab nende seast suvalise, mida kasutajale näidata
• ‘public static List<String> loefailist(String fail)’ – loeb failist ‘peptalk.txt’
motiveerivat tsitaadid
• ‘public static String saadaSõnum(String fail)’ – kutsub välja loeFailist meetodi ja
valib tsitaatide seast suvalise, mida kasutajale kuvada

3) PomodoroTaimer
• Küsib kasutajalt soovitud tsüklite arvu, käivitab taimeri vastavalt
• ‘public static void kutsuVälja()’ – suhtleb kasutajaga ja määrab ära, kas
käivitatakse tööaja või pausi taimer
• ‘public static void countdown(int minutid)’ – selle meetodi järgi taimer töötab
vastavalt parameetrina antud ajale.

4) Flashkaardid
• Suhelda kasutajaga, luua, hallata ja kuvada falshkaarte. Võimaldab kasutajal sisestada küsimusi ja vastuseid, ning hiljem
• 'start(Stage primaryStage)': Peamine meetod, mis seadistab ja kuvab graafilist lahendust ning haldab kasutaja sisestusi ja nupuvajutusi.
• 'private void logiKaardiSisestus(String s, String kusimus, String vastus)': Logib kaardiga seotud tegevused faili.


5) Kaart
• Andmestruktuur, mida kasutatakse informatsiooni hoidmiseks ja haldamiseks
• Konstruktor ´public Kaart(String kusimus, String vastus' - alustab kaardi obkjekti
koos küsimuse ja vastusega
• Getter 'getKusimus()' - tagastab kaardi küsimuse.
• Getter 'getVastus()' - tagastab kaardi vastuse.

6) Kaardihaldur
• Võimaldab kaarte lisada ja saada
• 'public void lisaKaart(String kusimus, String vastus)' - lisab uue kaardi
• 'private ObservableList<Kaart> kaardid'  - list flashkaartide jaoks
• 'public List<Kaart> getKõikKaardid()' - tagastab kaartide nimekirja.

7) ToDoApp
• JavaFX klass
• loeb taskid failist "todo.txt" kui application käivitatakse
• kirjutab taskid faili "todo.txt" kui application suletakse

8) ToDoList
• VBoxi alamklass
• loob tekstiväljad ja nupud rakenduse töötamiseks
• Võimaldab taske loetelust kustutada ja neid sinna lisada



Rühmatöö etapid:

1) Idee leidmine, kokkulepete tegemine rühmakaaslaste vahel
2) Tööplaani kooskõlastamine
3) Kasutaja ja programmi vahelise suhtluse loomine
4) Vajalike funktsionaalsuste loomine, rühmakaaslased tegid eraldi
5) Uuenduste tegemine, GUI loomine
6) Funktsionaalsuste ja Põhiklassi kokkuviimine, rühmakaaslaste koodi ühendamine
7) Viimistlemine ja kommenteerimine
8) Kirjelduse koostamine, mõlema rühmakaaslase tagasiside


Mariann:
Minu teha oli Flashkaardid ja selle realiseerimne JavaFx-is.
Hea oli, et jätkasime oma rühmatööga, mida esimesena tegime,  nii oli lihtsam teemaga edasi minna, ega pidanud nullist alustama.
Kõige rohkkem aega võttis JavaFX-ga töötamine. ALguses tuli asju meelde tuletada ja googeldada.
Minu tehtud klassid: Kaart.java, Kaardihaldur.java, FlashKaardid.java.
Tööjaotus oli meil hea, jagasime ära, kes millega tegeleb ja siis oli hea alguses üksinda nokitseda ning hiljem asjad kokku panna. 
Nii oli ka hea proovida ninhg testida koodijuppe.
Rühmakaaslasega koostöö sujus hästi.



Kairin:
1) Minu teha oli kasutajale motiveerivate sõnumite kuvamine ja pomodoro taimeri loomine. Lõin
selleks klassid MotiveerivSõnum ja PomodoroTaimer. Ka fail ‘peptalk.txt’ on minu koostatud. Oma
algse idee selgitamise lihtsustamiseks kirjutasin põhiklassi valmis kasutaja poole pöördumise.
Kokku kulus projekti esimese osa tegemiseks ligikaudu 6h.
2) Väga tore oli sama rühmakaaslasega ka teist projekti osa teha :). Sain seekord harjutada JavaFXi
kasutamist ja andmete failist lugemist ning nende faili kirjutamist. JavaFX-iga töötamine pole just mu lemmik,
aga seda enam olin õnnelik, kui programm lõpuks töötas nii nagu soovisin. Rühmatöö
teise osa peale kulus umbes sama kaua aega kui esimese osa peale.



Mured:

1) Panime mõlemad tähele, et alguses oli keeruline ise programmi koostada, sest erinevalt muust
koolitööst ei olnud nüüd juhendit ees. Esimene katsumus oli kasutaja ja programmi vahelise
suhtluse lisamine, sest sellega ei olnud javas varem kokku puutunud. Peale esimeste takistuste
ületamist läks lahenduste leidmine juba kiiremini.
2) Kõige keerulisem osa oli JavaFX klassid ühendada varem koostatud Java klassidega.



Hinnang:

Oleme oma tööga rahul, sest saime valmis programmi, mis rühmatöö nõuetele vastab, ning
millest meile endalegi kasu võiks olla. Tööjaotusega oleme samuti rahul, sest see võimaldas meil
keskenduda kindlate funktsionaalsuste loomisele ning hiljem saime need omavahel peaklassi
abil üsna lihtsasti ühendada.



Testimine:

Kasutajaga suhtlust sai kotrollida kui teised klassid peaklassist välja kommenteerisime ning
erinevate inputide puhul lasime programmil kindlaid tulemusi tagastada. Teistes klassides
olevaid meetodeid sai kontrollida peaklassi abil, tehes mitmeid kordi läbi programmi kasutamise
erinevaid viise.
